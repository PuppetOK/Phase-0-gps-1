1. You want to make feature branches because you do your editing/coding on branches. You don't want to make any changes to the code on the master branch that you don't know will work perfectly. Branches are pretty much the place where you make edits to code or add code that might not work correctly at first.

2. Git tracks changes through a series of snapshots. If you have made and committed changes git will store them. If you haven't committed your work in git, it wont save the changes.

3. The commit messages that you use should be detailed on what you have changed. The best practices are to commmit after you have made any changes to any files. The best practices are to add and commit files  early and often. 

4. I explained what a branch is pretty thoroughly in the first answer, but it is a place where it is safe to make changes/add code to a project. To create a branch you would:
	- First find out what branch you are currently on (only applicable if you're not in a new repo) by using the command git branch.
	- Second run the command git checkout BRANCH-NAME to navigate to another branch. If you are on a new repo and need to create a NEW branch you would run the command git checkout -b NEW-BRANCH-NAME to create and move to it.
	-Third to move between different branches you use the command git checkout BRANCH-NAME.

5. The command git fetch downloads from another repository. Git <remote> is usually going to be git origin <branch> in our case. Git merge <remote>/<branch> merges the branch or repo that we are trying to get.

6. The merge conflict happened because the file on the branch small_conflict and the master branch weren’t the same.

Release 6 Discussion:
	Good git workflow is making sure you do certain things, such as adding branches, adding and committing files, make pull requests and merge your branches if they don’t have any issues. If they do have issues find the issues and fix them.